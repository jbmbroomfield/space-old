{"ast":null,"code":"import Path from './Path';\n\nclass Orbit extends Path {\n  constructor(primary, radius, period, initialAngle, rotation = 0, direction = 1) {\n    super();\n    this.primary = primary;\n    this.radius = radius;\n    [this.minorRadius, this.majorRadius] = Array.isArray(radius) ? radius.sort() : [radius, radius];\n    const gravitationalConstant = primary.system.gravitationalConstant;\n    this.period = 2 * Math.PI * (this.majorRadius ** 3 / primary.mass / gravitationalConstant) ** 0.5;\n    this.initialAngle = initialAngle * Math.PI / 180;\n    this.rotation = rotation * Math.PI / 180;\n    this.direction = direction;\n  }\n\n  position(steps) {\n    const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius];\n    const [centreX, centreY] = this.getCentre(majorRadius, minorRadius);\n    const angle = 2 * Math.PI * this.direction / this.period * steps + this.initialAngle;\n    const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n    const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)];\n    const x = majorRadius * cosAngle * cosRotation - minorRadius * sinAngle * sinRotation + centreX;\n    const y = majorRadius * cosAngle * sinRotation + minorRadius * sinAngle * cosRotation + centreY; // const x = majorRadius * Math.cos(angle) + centreX\n    // const y = minorRadius * Math.sin(angle) + centreY\n\n    return [x, y];\n  } // unrotated_position(steps) {\n  //     const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n  //     const [centreX, centreY] = this.getCentre(radiusX, radiusY)\n  //     const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n  //     const x = centreX + radiusX * Math.cos(angle)\n  //     const y = centreY + radiusY * Math.sin(angle)\n  //     return [x, y]\n  // }\n\n\n  getCentre(majorRadius, minorRadius) {\n    const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n    const distanceToCentre = (majorRadius ** 2 - minorRadius ** 2) ** 0.5;\n    const centreX = primaryX + distanceToCentre * Math.cos(this.rotation);\n    const centreY = primaryY + distanceToCentre * Math.sin(this.rotation);\n    return [centreX, centreY];\n  }\n\n}\n\nexport default Orbit;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Orbit.js"],"names":["Path","Orbit","constructor","primary","radius","period","initialAngle","rotation","direction","minorRadius","majorRadius","Array","isArray","sort","gravitationalConstant","system","Math","PI","mass","position","steps","centreX","centreY","getCentre","angle","cosAngle","sinAngle","cos","sin","cosRotation","sinRotation","x","y","primaryX","primaryY","distanceToCentre"],"mappings":"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","sourcesContent":["import Path from './Path'\n\nclass Orbit extends Path {\n    constructor(primary, radius, period, initialAngle, rotation = 0, direction = 1) {\n        super()\n        this.primary = primary;\n        this.radius = radius;\n        [this.minorRadius, this.majorRadius] = Array.isArray(radius) ? radius.sort() : [radius, radius]\n\n        const gravitationalConstant = primary.system.gravitationalConstant\n\n        this.period = 2 * Math.PI * (this.majorRadius ** 3 / primary.mass / gravitationalConstant) ** 0.5\n        this.initialAngle = initialAngle * Math.PI / 180\n        this.rotation = rotation * Math.PI / 180\n        this.direction = direction\n    }\n\n    position(steps) {\n        const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius];\n        const [centreX, centreY] = this.getCentre(majorRadius, minorRadius)\n        const angle = 2 * Math.PI * this.direction / this.period * steps + this.initialAngle;\n        const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n        const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)]\n        const x = majorRadius * cosAngle * cosRotation - minorRadius * sinAngle * sinRotation + centreX\n        const y = majorRadius * cosAngle * sinRotation + minorRadius * sinAngle * cosRotation + centreY\n\n        // const x = majorRadius * Math.cos(angle) + centreX\n        // const y = minorRadius * Math.sin(angle) + centreY\n\n        return [x, y]\n    }\n\n    // unrotated_position(steps) {\n    //     const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n    //     const [centreX, centreY] = this.getCentre(radiusX, radiusY)\n    //     const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n    //     const x = centreX + radiusX * Math.cos(angle)\n    //     const y = centreY + radiusY * Math.sin(angle)\n    //     return [x, y]\n    // }\n\n    getCentre(majorRadius, minorRadius) {\n        const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n        const distanceToCentre = (majorRadius ** 2 - minorRadius ** 2) ** 0.5\n        const centreX = primaryX + distanceToCentre * Math.cos(this.rotation)\n        const centreY = primaryY + distanceToCentre * Math.sin(this.rotation)\n        return [centreX, centreY]\n\n\n    }\n}\n\nexport default Orbit"]},"metadata":{},"sourceType":"module"}