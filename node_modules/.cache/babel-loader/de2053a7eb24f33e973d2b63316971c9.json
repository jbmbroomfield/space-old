{"ast":null,"code":"var _jsxFileName = \"/home/jim/projects/space/src/components/SystemDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EntityDisplay from './EntityDisplay';\nimport System, { baseSystem } from '../classes/System';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SystemDisplay = props => {\n  _s();\n\n  const [value, setValue] = useState(0); // integer state\n\n  const [system, setSystem] = useState(baseSystem);\n  const [planets, setPlanets] = useState(baseSystem.planets);\n  console.log(planets);\n  const entities = planets.map((planet, index) => /*#__PURE__*/_jsxDEV(EntityDisplay, {\n    entity: planet\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    // setSystem(system => {\n    //     system.new_planet('yellow', 9, 100, 100)\n    //     system.new_planet('red', 5, 120, 80)\n    //     console.log(system.planets)\n    //     return system\n    // })\n    const interval = setInterval(() => {\n      console.log('interval');\n      setSystem(system => system.step());\n      setValue(value + 1);\n      console.log(value);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []); // const intervalFunc = () => {\n  //     setSystem(system => system.step())\n  //     // setPlanets(system.planets)\n  //     setValue(value + 1)\n  // }\n  // setInterval(intervalFunc,1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space\",\n    children: entities\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SystemDisplay, \"gFWt/z7E8vHk+4octhtg3lAbrAc=\");\n\n_c = SystemDisplay;\nexport default SystemDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"SystemDisplay\");","map":{"version":3,"sources":["/home/jim/projects/space/src/components/SystemDisplay.js"],"names":["React","useState","useEffect","EntityDisplay","System","baseSystem","SystemDisplay","props","value","setValue","system","setSystem","planets","setPlanets","console","log","entities","map","planet","index","interval","setInterval","step","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,mBAAnC;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC,CAD2B,CACY;;AACvC,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACI,UAAD,CAApC;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACI,UAAU,CAACO,OAAZ,CAAtC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEA,QAAMI,QAAQ,GAAGJ,OAAO,CAACK,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACzB,QAAC,aAAD;AAA2B,IAAA,MAAM,EAAED;AAAnC,KAAoBC,KAApB;AAAA;AAAA;AAAA;AAAA,UADa,CAAjB;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAMkB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BP,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAJ,MAAAA,SAAS,CAACD,MAAM,IAAIA,MAAM,CAACY,IAAP,EAAX,CAAT;AACAb,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACH,KAL2B,EAK1B,IAL0B,CAA5B;AAMA,WAAO,MAAMe,aAAa,CAACH,QAAD,CAA1B;AACH,GAdQ,EAcN,EAdM,CAAT,CAZ2B,CA6B3B;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKJ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1CD;;GAAMV,a;;KAAAA,a;AA4CN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EntityDisplay from './EntityDisplay'\nimport System, { baseSystem } from '../classes/System'\n\nconst SystemDisplay = props => {\n    const [value, setValue] = useState(0); // integer state\n    const [system, setSystem] = useState(baseSystem)\n\n    const [planets, setPlanets] = useState(baseSystem.planets)\n\n    console.log(planets)\n\n    const entities = planets.map((planet, index) =>(\n        <EntityDisplay key={index} entity={planet} />\n    ))\n\n    useEffect(() => {\n        // setSystem(system => {\n        //     system.new_planet('yellow', 9, 100, 100)\n        //     system.new_planet('red', 5, 120, 80)\n        //     console.log(system.planets)\n        //     return system\n        // })\n        const interval = setInterval(() => {\n            console.log('interval')\n            setSystem(system => system.step())\n            setValue(value + 1)\n            console.log(value)\n        },1000)\n        return () => clearInterval(interval)\n    }, [])\n\n\n    // const intervalFunc = () => {\n    //     setSystem(system => system.step())\n    //     // setPlanets(system.planets)\n    //     setValue(value + 1)\n    // }\n\n    // setInterval(intervalFunc,1000)\n\n    return (\n        <div className=\"space\">\n            {entities}\n        </div>\n    )\n}\n\nexport default SystemDisplay"]},"metadata":{},"sourceType":"module"}