{"ast":null,"code":"var _jsxFileName = \"/home/jim/projects/space/src/components/SystemDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EntityDisplay from './EntityDisplay';\nimport { baseSystem } from '../classes/System';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SystemDisplay = props => {\n  _s();\n\n  // const [value, setValue] = useState(0); // integer state\n  const [system, setSystem] = useState(baseSystem); // const [planets, setPlanets] = useState(baseSystem.planets)\n\n  const [planetStyles, setPlanetStyles] = useState(baseSystem.planets.map(planet => planet.style()));\n  const styles = planetStyles.map((style, index) => /*#__PURE__*/_jsxDEV(EntityDisplay, {\n    style: style\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this)); // useEffect(() => {\n  //     // setSystem(system => {\n  //     //     system.new_planet('yellow', 9, 100, 100)\n  //     //     system.new_planet('red', 5, 120, 80)\n  //     //     console.log(system.planets)\n  //     //     return system\n  //     // })\n  //     const interval = setInterval(() => {\n  //         console.log('interval')\n  //         const nextSystem = system.step()\n  //         const nextPlanetStyles = nextSystem.planets.map(planet => planet.style())\n  //         setSystem(nextSystem)\n  //         setPlanetStyles(nextPlanetStyles)\n  //     }, 1000)\n  //     return () => {\n  //         console.log('hi')\n  //         clearInterval(interval)\n  //     }\n  // }, [system])\n\n  setInterval(() => {\n    console.log('interval');\n    const nextSystem = system.step();\n    const nextPlanetStyles = nextSystem.planets.map(planet => planet.style());\n    setSystem(nextSystem);\n    setPlanetStyles(nextPlanetStyles);\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space\",\n    children: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SystemDisplay, \"+wFDZvi3tdZTGAwffVfDdTXG7Ec=\");\n\n_c = SystemDisplay;\nexport default SystemDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"SystemDisplay\");","map":{"version":3,"sources":["/home/jim/projects/space/src/components/SystemDisplay.js"],"names":["React","useState","useEffect","EntityDisplay","baseSystem","SystemDisplay","props","system","setSystem","planetStyles","setPlanetStyles","planets","map","planet","style","styles","index","setInterval","console","log","nextSystem","step","nextPlanetStyles"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,mBAA3B;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACG,UAAD,CAApC,CAF2B,CAI3B;;AAEA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAACG,UAAU,CAACO,OAAX,CAAmBC,GAAnB,CAAuBC,MAAM,IAAIA,MAAM,CAACC,KAAP,EAAjC,CAAD,CAAhD;AAEA,QAAMC,MAAM,GAAGN,YAAY,CAACG,GAAb,CAAiB,CAACE,KAAD,EAAQE,KAAR,kBAC5B,QAAC,aAAD;AAA2B,IAAA,KAAK,EAAEF;AAAlC,KAAoBE,KAApB;AAAA;AAAA;AAAA;AAAA,UADW,CAAf,CAR2B,CAY3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAC,EAAAA,WAAW,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,UAAU,GAAGb,MAAM,CAACc,IAAP,EAAnB;AACA,UAAMC,gBAAgB,GAAGF,UAAU,CAACT,OAAX,CAAmBC,GAAnB,CAAuBC,MAAM,IAAIA,MAAM,CAACC,KAAP,EAAjC,CAAzB;AACAN,IAAAA,SAAS,CAACY,UAAD,CAAT;AACAV,IAAAA,eAAe,CAACY,gBAAD,CAAf;AACH,GANU,EAMR,IANQ,CAAX;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9CD;;GAAMV,a;;KAAAA,a;AAgDN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EntityDisplay from './EntityDisplay'\nimport { baseSystem } from '../classes/System'\n\nconst SystemDisplay = props => {\n    // const [value, setValue] = useState(0); // integer state\n    const [system, setSystem] = useState(baseSystem)\n\n    // const [planets, setPlanets] = useState(baseSystem.planets)\n\n    const [planetStyles, setPlanetStyles] = useState(baseSystem.planets.map(planet => planet.style()))\n\n    const styles = planetStyles.map((style, index) => (\n        <EntityDisplay key={index} style={style} />\n    ))\n\n    // useEffect(() => {\n    //     // setSystem(system => {\n    //     //     system.new_planet('yellow', 9, 100, 100)\n    //     //     system.new_planet('red', 5, 120, 80)\n    //     //     console.log(system.planets)\n    //     //     return system\n    //     // })\n    //     const interval = setInterval(() => {\n    //         console.log('interval')\n    //         const nextSystem = system.step()\n    //         const nextPlanetStyles = nextSystem.planets.map(planet => planet.style())\n    //         setSystem(nextSystem)\n    //         setPlanetStyles(nextPlanetStyles)\n    //     }, 1000)\n    //     return () => {\n    //         console.log('hi')\n    //         clearInterval(interval)\n    //     }\n    // }, [system])\n\n\n    setInterval(() => {\n        console.log('interval')\n        const nextSystem = system.step()\n        const nextPlanetStyles = nextSystem.planets.map(planet => planet.style())\n        setSystem(nextSystem)\n        setPlanetStyles(nextPlanetStyles)\n    }, 1000)\n\n    return (\n        <div className=\"space\">\n            {styles}\n        </div>\n    )\n}\n\nexport default SystemDisplay"]},"metadata":{},"sourceType":"module"}