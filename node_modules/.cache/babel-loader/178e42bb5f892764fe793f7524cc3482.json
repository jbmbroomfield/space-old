{"ast":null,"code":"function mult(number, point) {\n  return [number * point[0], number * point[1]];\n}\n\nfunction add(point1, point2) {\n  return [point1[0] + point2[0], point1[1] + point2[1]];\n}\n\nfunction getPosition(p0, p1, t) {\n  const term1 = mult(1 - t, p0);\n  const term2 = mult(t, p1);\n  return add(term1, term2);\n}\n\nclass Bezier {\n  constructor(startTime, endTime, ...points) {\n    this.startTime = startTime;\n    this.endTime = endTime;\n\n    if (points.length == 1) {\n      this.initial = points[0];\n      this.final = points[0];\n    } else {\n      this.initial = new Bezier(startTime, endTime, ...points.slice(0, points.length - 1));\n      this.final = new Bezier(startTime, endTime, ...points.slice(1, points.length));\n    }\n  }\n\n  position(time, t = null) {\n    if (this.initial == this.final) {\n      return this.initial;\n    }\n\n    if (time < this.startTime) {\n      return this.points[0];\n    }\n\n    if (time > this.endTime) {\n      return this.points[this.points.length - 1];\n    }\n\n    if (!t) {\n      t = (time - this.startTime) / (this.endTime - this.startTime);\n    }\n\n    if (this.points.length === 2) {\n      const p0 = this.initial.position(time, t);\n      const p1 = this.final.position(time, t);\n      return getPosition(p0, p1, t);\n    }\n  }\n\n}\n\nexport default Bezier;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Bezier.js"],"names":["mult","number","point","add","point1","point2","getPosition","p0","p1","t","term1","term2","Bezier","constructor","startTime","endTime","points","length","initial","final","slice","position","time"],"mappings":"AAAA,SAASA,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AACzB,SAAO,CAACD,MAAM,GAAGC,KAAK,CAAC,CAAD,CAAf,EAAoBD,MAAM,GAAGC,KAAK,CAAC,CAAD,CAAlC,CAAP;AACH;;AAED,SAASC,GAAT,CAAaC,MAAb,EAAqBC,MAArB,EAA6B;AACzB,SAAO,CAACD,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAAnB,EAAwBD,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAA1C,CAAP;AACH;;AAED,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,CAA7B,EAAgC;AAC5B,QAAMC,KAAK,GAAGV,IAAI,CAAC,IAAIS,CAAL,EAAQF,EAAR,CAAlB;AACA,QAAMI,KAAK,GAAGX,IAAI,CAACS,CAAD,EAAID,EAAJ,CAAlB;AACA,SAAOL,GAAG,CAACO,KAAD,EAAQC,KAAR,CAAV;AACH;;AAED,MAAMC,MAAN,CAAa;AAETC,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB,GAAGC,MAAxB,EAAgC;AACvC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;;AACA,QAAIC,MAAM,CAACC,MAAP,IAAiB,CAArB,EAAwB;AACpB,WAAKC,OAAL,GAAeF,MAAM,CAAC,CAAD,CAArB;AACA,WAAKG,KAAL,GAAaH,MAAM,CAAC,CAAD,CAAnB;AACH,KAHD,MAGO;AACH,WAAKE,OAAL,GAAe,IAAIN,MAAJ,CAAWE,SAAX,EAAsBC,OAAtB,EAA+B,GAAGC,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBJ,MAAM,CAACC,MAAP,GAAgB,CAAhC,CAAlC,CAAf;AACA,WAAKE,KAAL,GAAa,IAAIP,MAAJ,CAAWE,SAAX,EAAsBC,OAAtB,EAA+B,GAAGC,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBJ,MAAM,CAACC,MAAvB,CAAlC,CAAb;AACH;AACJ;;AAEDI,EAAAA,QAAQ,CAACC,IAAD,EAAOb,CAAC,GAAC,IAAT,EAAe;AACnB,QAAI,KAAKS,OAAL,IAAgB,KAAKC,KAAzB,EAAgC;AAC5B,aAAO,KAAKD,OAAZ;AACH;;AACD,QAAII,IAAI,GAAG,KAAKR,SAAhB,EAA2B;AACvB,aAAO,KAAKE,MAAL,CAAY,CAAZ,CAAP;AACH;;AACD,QAAIM,IAAI,GAAG,KAAKP,OAAhB,EAAyB;AACrB,aAAO,KAAKC,MAAL,CAAY,KAAKA,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,CAAP;AACH;;AACD,QAAI,CAACR,CAAL,EAAQ;AACJA,MAAAA,CAAC,GAAG,CAACa,IAAI,GAAG,KAAKR,SAAb,KAA2B,KAAKC,OAAL,GAAe,KAAKD,SAA/C,CAAJ;AACH;;AACD,QAAI,KAAKE,MAAL,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,YAAMV,EAAE,GAAG,KAAKW,OAAL,CAAaG,QAAb,CAAsBC,IAAtB,EAA4Bb,CAA5B,CAAX;AACA,YAAMD,EAAE,GAAG,KAAKW,KAAL,CAAWE,QAAX,CAAoBC,IAApB,EAA0Bb,CAA1B,CAAX;AACA,aAAOH,WAAW,CAACC,EAAD,EAAKC,EAAL,EAASC,CAAT,CAAlB;AACH;AACJ;;AAhCQ;;AAmCb,eAAeG,MAAf","sourcesContent":["function mult(number, point) {\n    return [number * point[0], number * point[1]]\n}\n\nfunction add(point1, point2) {\n    return [point1[0] + point2[0], point1[1] + point2[1]]\n}\n\nfunction getPosition(p0, p1, t) {\n    const term1 = mult(1 - t, p0)\n    const term2 = mult(t, p1)\n    return add(term1, term2)\n}\n\nclass Bezier {\n\n    constructor(startTime, endTime, ...points) {\n        this.startTime = startTime\n        this.endTime = endTime\n        if (points.length == 1) {\n            this.initial = points[0]\n            this.final = points[0]\n        } else {\n            this.initial = new Bezier(startTime, endTime, ...points.slice(0, points.length - 1))\n            this.final = new Bezier(startTime, endTime, ...points.slice(1, points.length))\n        }\n    }\n\n    position(time, t=null) {\n        if (this.initial == this.final) {\n            return this.initial\n        }\n        if (time < this.startTime) {\n            return this.points[0]\n        }\n        if (time > this.endTime) {\n            return this.points[this.points.length - 1]\n        }\n        if (!t) {\n            t = (time - this.startTime) / (this.endTime - this.startTime)\n        }\n        if (this.points.length === 2) {\n            const p0 = this.initial.position(time, t)\n            const p1 = this.final.position(time, t)\n            return getPosition(p0, p1, t)\n        }\n    }\n}\n\nexport default Bezier"]},"metadata":{},"sourceType":"module"}