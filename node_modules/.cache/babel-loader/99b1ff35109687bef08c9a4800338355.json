{"ast":null,"code":"import Path from './Path';\n\nclass Orbit extends Path {\n  constructor(primary, radius, initialAngle, rotation = 0, direction = 1) {\n    super();\n    this.primary = primary;\n    this.radius = radius;\n    [this.minorRadius, this.majorRadius] = Array.isArray(radius) ? radius.sort() : [radius, radius];\n    const gravitationalConstant = primary.system.gravitationalConstant;\n    this.period = 2 * Math.PI * (this.majorRadius ** 3 / primary.mass / gravitationalConstant) ** 0.5;\n    this.initialAngle = initialAngle * Math.PI / 180;\n    this.rotation = rotation * Math.PI / 180;\n    this.direction = direction;\n  }\n\n  position(time) {\n    const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius];\n    const [centreX, centreY] = this.getCentre(majorRadius, minorRadius, time);\n    const angle = 2 * Math.PI * this.direction / this.period * time + this.initialAngle;\n    const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n    const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)];\n    const x = majorRadius * cosAngle * cosRotation - minorRadius * sinAngle * sinRotation + centreX;\n    const y = majorRadius * cosAngle * sinRotation + minorRadius * sinAngle * cosRotation + centreY;\n    return [x, y];\n  }\n\n  getCentre(majorRadius, minorRadius, time) {\n    const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position(time);\n    const distanceToCentre = (majorRadius ** 2 - minorRadius ** 2) ** 0.5;\n    const centreX = primaryX + distanceToCentre * Math.cos(this.rotation);\n    const centreY = primaryY + distanceToCentre * Math.sin(this.rotation);\n    return [centreX, centreY];\n  }\n\n}\n\nexport default Orbit;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Orbit.js"],"names":["Path","Orbit","constructor","primary","radius","initialAngle","rotation","direction","minorRadius","majorRadius","Array","isArray","sort","gravitationalConstant","system","period","Math","PI","mass","position","time","centreX","centreY","getCentre","angle","cosAngle","sinAngle","cos","sin","cosRotation","sinRotation","x","y","primaryX","primaryY","distanceToCentre"],"mappings":"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","sourcesContent":["import Path from './Path'\n\nclass Orbit extends Path {\n    constructor(primary, radius, initialAngle, rotation = 0, direction = 1) {\n        super()\n        this.primary = primary;\n        this.radius = radius;\n        [this.minorRadius, this.majorRadius] = Array.isArray(radius) ? radius.sort() : [radius, radius]\n\n        const gravitationalConstant = primary.system.gravitationalConstant\n\n        this.period = 2 * Math.PI * (this.majorRadius ** 3 / primary.mass / gravitationalConstant) ** 0.5\n        this.initialAngle = initialAngle * Math.PI / 180\n        this.rotation = rotation * Math.PI / 180\n        this.direction = direction\n    }\n\n    position(time) {\n        const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius];\n        const [centreX, centreY] = this.getCentre(majorRadius, minorRadius, time)\n        const angle = 2 * Math.PI * this.direction / this.period * time + this.initialAngle;\n        const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n        const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)]\n        const x = majorRadius * cosAngle * cosRotation - minorRadius * sinAngle * sinRotation + centreX\n        const y = majorRadius * cosAngle * sinRotation + minorRadius * sinAngle * cosRotation + centreY\n        return [x, y]\n    }\n\n    getCentre(majorRadius, minorRadius, time) {\n        const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position(time);\n        const distanceToCentre = (majorRadius ** 2 - minorRadius ** 2) ** 0.5\n        const centreX = primaryX + distanceToCentre * Math.cos(this.rotation)\n        const centreY = primaryY + distanceToCentre * Math.sin(this.rotation)\n        return [centreX, centreY]\n    }\n}\n\nexport default Orbit"]},"metadata":{},"sourceType":"module"}