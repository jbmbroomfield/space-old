{"ast":null,"code":"import Planet from './Planet';\nimport Ship from './Ship'; // import Orbit from './Orbit'\n\nimport Bezier from './Bezier'; // import ShipComponent from '../components/ShipComponent'\n\nimport Stationary from './Stationary';\n\nclass System {\n  constructor(galaxy, radius) {\n    this.galaxy = galaxy;\n    this.radius = radius;\n    this.centre = [radius / 2, radius / 2];\n    this.planets = [];\n    this.ships = [];\n    this.time = 0;\n    this.gravitationalConstant = 1 / 50;\n  }\n\n  step() {\n    this.time++; // for (const planet of this.planets) {\n    //     planet.color !== 'yellow' && planet.step() \n    // }\n    // for (const ship of this.ships) {\n    //     ship.step() \n    // }\n\n    return this;\n  }\n\n  new_planet(color, radius, mass, x, y) {\n    const planet = new Planet(this, color, radius, mass, x, y);\n    this.planets.push(planet);\n    return planet;\n  }\n\n  new_ship(color, radius, mass, x, y) {\n    const ship = new Ship(this, color, radius, mass, x, y);\n    this.ships.push(ship);\n    return ship;\n  }\n\n}\n\nexport default System;\nconst baseSystem = new System('Galaxy', 500);\nlet [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]];\np0 = [100, 100];\np1 = [400, 100];\np2 = [400, 400];\np3 = [100, 400];\nconst t = 2000;\nconst sun = baseSystem.new_planet('yellow', 2, 5000);\nsun.path = new Stationary(...p0); // const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 10); // planet.path = new Orbit(sun, [75, 60], 500, 0, 0, 1)\n\nplanet.path = new Stationary(...p1); // planet2.path = new Orbit(sun, [75, 60], 500, 0, 90, 1)\n\nconst planet3 = baseSystem.new_planet('purple', 2, 10);\nplanet3.path = new Stationary(...p2);\nconst planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1]);\nplanet4.path = new Stationary(...p3); // planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('orange', 2, 10);\nship.path = new Bezier(0, t, p0, p1);\nconsole.log('---');\nconsole.log(ship.position(0));\nconsole.log('---');\nconst ship2 = baseSystem.new_ship('orange', 2, 10);\nship2.path = new Bezier(0, t, p1, p2);\nconst ship3 = baseSystem.new_ship('orange', 2, 10);\nship3.path = new Bezier(0, t, p2, p3);\nconst ship4 = baseSystem.new_ship('red', 2, 10);\nship4.path = new Bezier(0, t, p0, p1, p2);\nconst ship5 = baseSystem.new_ship('red', 2, 10);\nship5.path = new Bezier(0, t, p1, p2, p3);\nconst ship6 = baseSystem.new_ship('blue', 2, 10);\nship6.path = new Bezier(0, t, p0, p1, p2, p3); // console.log(ship.path.initial_speed * 3)\n// console.log(ship4.path.initial_speed * 3/2)\n// console.log(ship6.path.initial_speed)\n// console.log(ship5.path.initial_speed / 2)\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n// console.log('---')\n// // console.log(ship.path.final_speed / ship6.path.final_speed)\n// // console.log(ship.path.final_speed / ship3.path.final_speed)\n// console.log(ship3.path.final_speed * 3)\n// console.log(ship5.path.final_speed * 3/2)\n// console.log(ship6.path.final_speed)\n// console.log('+++')\n\nconsole.log([ship6.path.max_speed, ship6.path.speed(t / 2)]);\nconsole.log([ship.path.max_speed, ship2.path.max_speed, ship3.path.max_speed]);\nconsole.log(ship.path.max_speed + ship2.path.max_speed + ship3.path.max_speed); // console.log(ship4.path.final_speed)\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\nexport { baseSystem };","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/System.js"],"names":["Planet","Ship","Bezier","Stationary","System","constructor","galaxy","radius","centre","planets","ships","time","gravitationalConstant","step","new_planet","color","mass","x","y","planet","push","new_ship","ship","baseSystem","p0","p1","p2","p3","t","sun","path","planet3","planet4","console","log","position","ship2","ship3","ship4","ship5","ship6","max_speed","speed"],"mappings":"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","sourcesContent":["import Planet from './Planet'\nimport Ship from './Ship'\n// import Orbit from './Orbit'\nimport Bezier from './Bezier'\n// import ShipComponent from '../components/ShipComponent'\nimport Stationary from './Stationary'\n\nclass System {\n\n    constructor(galaxy, radius) {\n        this.galaxy = galaxy\n        this.radius = radius\n        this.centre = [radius / 2, radius / 2]\n        this.planets = []\n        this.ships = []\n        this.time = 0\n        this.gravitationalConstant = 1/50\n    }\n\n    step() {\n        this.time++\n        // for (const planet of this.planets) {\n        //     planet.color !== 'yellow' && planet.step() \n        // }\n        // for (const ship of this.ships) {\n        //     ship.step() \n        // }\n        return this\n    }\n\n    new_planet(color, radius, mass, x, y) {\n        const planet = new Planet(this, color, radius, mass, x, y)\n        this.planets.push(planet)\n        return planet\n    }\n\n    new_ship(color, radius, mass, x, y) {\n        const ship = new Ship(this, color, radius, mass, x, y)\n        this.ships.push(ship)\n        return ship\n    }\n\n}\n\nexport default System\n\nconst baseSystem = new System('Galaxy', 500)\n\nlet [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]]\n\np0 = [100, 100]\n\np1 = [400, 100]\n\np2 = [400, 400]\n\np3 = [100 , 400]\n\nconst t = 2000\n\nconst sun = baseSystem.new_planet('yellow', 2, 5000);\nsun.path = new Stationary(...p0)\n\n\n// const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 10)\n// planet.path = new Orbit(sun, [75, 60], 500, 0, 0, 1)\nplanet.path = new Stationary(...p1)\n\n\n// planet2.path = new Orbit(sun, [75, 60], 500, 0, 90, 1)\n\nconst planet3 = baseSystem.new_planet('purple', 2, 10)\nplanet3.path = new Stationary(...p2)\n\nconst planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1])\nplanet4.path = new Stationary(...p3)\n// planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('orange', 2, 10)\nship.path = new Bezier(0, t, p0, p1)\n\nconsole.log('---')\nconsole.log(ship.position(0))\nconsole.log('---')\n\nconst ship2 = baseSystem.new_ship('orange', 2, 10)\nship2.path = new Bezier(0, t, p1, p2)\n\nconst ship3 = baseSystem.new_ship('orange', 2, 10)\nship3.path = new Bezier(0, t, p2, p3)\n\n\nconst ship4 = baseSystem.new_ship('red', 2, 10)\nship4.path = new Bezier(0, t, p0, p1, p2)\n\nconst ship5 = baseSystem.new_ship('red', 2, 10)\nship5.path = new Bezier(0, t, p1, p2, p3)\n\n\nconst ship6 = baseSystem.new_ship('blue', 2, 10)\nship6.path = new Bezier(0, t, p0, p1, p2, p3)\n\n// console.log(ship.path.initial_speed * 3)\n// console.log(ship4.path.initial_speed * 3/2)\n// console.log(ship6.path.initial_speed)\n// console.log(ship5.path.initial_speed / 2)\n\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n\n// console.log('---')\n\n// // console.log(ship.path.final_speed / ship6.path.final_speed)\n\n\n// // console.log(ship.path.final_speed / ship3.path.final_speed)\n\n// console.log(ship3.path.final_speed * 3)\n// console.log(ship5.path.final_speed * 3/2)\n// console.log(ship6.path.final_speed)\n\n// console.log('+++')\n\nconsole.log([ship6.path.max_speed, ship6.path.speed(t/2)])\nconsole.log([ship.path.max_speed, ship2.path.max_speed, ship3.path.max_speed])\n\nconsole.log(ship.path.max_speed + ship2.path.max_speed + ship3.path.max_speed)\n\n// console.log(ship4.path.final_speed)\n\n\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\n\n\nexport { baseSystem }"]},"metadata":{},"sourceType":"module"}