{"ast":null,"code":"var _jsxFileName = \"/home/jim/projects/space/src/components/SystemDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EntityDisplay from './EntityDisplay';\nimport System, { baseSystem } from '../classes/System';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SystemDisplay = props => {\n  _s();\n\n  const [value, setValue] = useState(0); // integer state\n\n  const [system, setSystem] = useState(baseSystem);\n  const [planets, setPlanets] = useState(baseSystem.planets);\n  const [planetStyles, setPlanetStyles] = useState({});\n  console.log(planets);\n  const styles = planetStyles.map((style, index) => /*#__PURE__*/_jsxDEV(EntityDisplay, {\n    style: style\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    // setSystem(system => {\n    //     system.new_planet('yellow', 9, 100, 100)\n    //     system.new_planet('red', 5, 120, 80)\n    //     console.log(system.planets)\n    //     return system\n    // })\n    const interval = setInterval(() => {\n      console.log('interval');\n      setSystem(system => {\n        system.step();\n        const nextPlanetStyles = system.planets.map(planet => planet.style);\n        setPlanetStyles(nextPlanetStyles);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []); // const intervalFunc = () => {\n  //     setSystem(system => system.step())\n  //     // setPlanets(system.planets)\n  //     setValue(value + 1)\n  // }\n  // setInterval(intervalFunc,1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space\",\n    children: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SystemDisplay, \"QfZLulRAy7GggJL/7hBRnW1IOpU=\");\n\n_c = SystemDisplay;\nexport default SystemDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"SystemDisplay\");","map":{"version":3,"sources":["/home/jim/projects/space/src/components/SystemDisplay.js"],"names":["React","useState","useEffect","EntityDisplay","System","baseSystem","SystemDisplay","props","value","setValue","system","setSystem","planets","setPlanets","planetStyles","setPlanetStyles","console","log","styles","map","style","index","interval","setInterval","step","nextPlanetStyles","planet","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,mBAAnC;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC,CAD2B,CACY;;AACvC,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACI,UAAD,CAApC;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACI,UAAU,CAACO,OAAZ,CAAtC;AAEA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AAEAe,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEA,QAAMM,MAAM,GAAGJ,YAAY,CAACK,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,kBAC5B,QAAC,aAAD;AAA2B,IAAA,KAAK,EAAED;AAAlC,KAAoBC,KAApB;AAAA;AAAA;AAAA;AAAA,UADW,CAAf;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAMoB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BP,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAN,MAAAA,SAAS,CAACD,MAAM,IAAI;AAChBA,QAAAA,MAAM,CAACc,IAAP;AACA,cAAMC,gBAAgB,GAAGf,MAAM,CAACE,OAAP,CAAeO,GAAf,CAAmBO,MAAM,IAAIA,MAAM,CAACN,KAApC,CAAzB;AACAL,QAAAA,eAAe,CAACU,gBAAD,CAAf;AACH,OAJQ,CAAT;AAKH,KAP2B,EAO1B,IAP0B,CAA5B;AAQA,WAAO,MAAME,aAAa,CAACL,QAAD,CAA1B;AACH,GAhBQ,EAgBN,EAhBM,CAAT,CAd2B,CAiC3B;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKJ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9CD;;GAAMZ,a;;KAAAA,a;AAgDN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EntityDisplay from './EntityDisplay'\nimport System, { baseSystem } from '../classes/System'\n\nconst SystemDisplay = props => {\n    const [value, setValue] = useState(0); // integer state\n    const [system, setSystem] = useState(baseSystem)\n\n    const [planets, setPlanets] = useState(baseSystem.planets)\n\n    const [planetStyles, setPlanetStyles] = useState({})\n\n    console.log(planets)\n\n    const styles = planetStyles.map((style, index) =>(\n        <EntityDisplay key={index} style={style} />\n    ))\n\n    useEffect(() => {\n        // setSystem(system => {\n        //     system.new_planet('yellow', 9, 100, 100)\n        //     system.new_planet('red', 5, 120, 80)\n        //     console.log(system.planets)\n        //     return system\n        // })\n        const interval = setInterval(() => {\n            console.log('interval')\n            setSystem(system => {\n                system.step()\n                const nextPlanetStyles = system.planets.map(planet => planet.style)\n                setPlanetStyles(nextPlanetStyles)\n            })\n        },1000)\n        return () => clearInterval(interval)\n    }, [])\n\n\n    // const intervalFunc = () => {\n    //     setSystem(system => system.step())\n    //     // setPlanets(system.planets)\n    //     setValue(value + 1)\n    // }\n\n    // setInterval(intervalFunc,1000)\n\n    return (\n        <div className=\"space\">\n            {styles}\n        </div>\n    )\n}\n\nexport default SystemDisplay"]},"metadata":{},"sourceType":"module"}