{"ast":null,"code":"import Planet from './Planet';\nimport Ship from './Ship';\nimport Orbit from './Orbit';\nimport Bezier from './Bezier';\nimport ShipComponent from '../components/ShipComponent';\n\nclass System {\n  constructor(galaxy, radius) {\n    this.galaxy = galaxy;\n    this.radius = radius;\n    this.centre = [radius / 2, radius / 2];\n    this.planets = [];\n    this.ships = [];\n    this.steps = 0;\n    this.gravitationalConstant = 1 / 50;\n  }\n\n  step() {\n    this.steps++;\n\n    for (const planet of this.planets) {\n      planet.color !== 'yellow' && planet.step();\n    }\n\n    for (const ship of this.ships) {\n      ship.step();\n    }\n\n    return this;\n  }\n\n  new_planet(color, radius, mass, x, y) {\n    const planet = new Planet(this, color, radius, mass, x, y);\n    this.planets.push(planet);\n    return planet;\n  }\n\n  new_ship(color, radius, mass, x, y) {\n    const ship = new Ship(this, color, radius, mass, x, y);\n    this.ships.push(ship);\n    return ship;\n  }\n\n}\n\nexport default System;\nconst baseSystem = new System('Galaxy', 500);\nlet [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]];\np0 = [100, 100];\np1 = [120, 80];\np2 = [350, 400];\np3 = [150, 350];\nconst sun = baseSystem.new_planet('yellow', 5, 5000, p0[0], p0[1]); // const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 10, p1[0], p1[1]); // planet.path = new Orbit(sun, [75, 60], 500, 0, 0, 1)\n// planet2.path = new Orbit(sun, [75, 60], 500, 0, 90, 1)\n\nconst planet3 = baseSystem.new_planet('purple', 2, 10, p2[0], p2[1]);\nconst planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1]); // planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('orange', 2, 10);\nship.path = new Bezier(0, 1000, p0, p1);\nconst ship2 = baseSystem.new_ship('orange', 2, 10);\nship2.path = new Bezier(0, 1000, p1, p2);\nconst ship3 = baseSystem.new_ship('orange', 2, 10);\nship3.path = new Bezier(0, 1000, p2, p3);\nconst ship4 = baseSystem.new_ship('red', 2, 10);\nship4.path = new Bezier(0, 1000, p0, p1, p2);\nconst ship5 = baseSystem.new_ship('red', 2, 10);\nship5.path = new Bezier(0, 1000, p1, p2, p3);\nconst ship6 = baseSystem.new_ship('blue', 2, 10);\nship6.path = new Bezier(0, 1000, p0, p1, p2, p3);\nconsole.log(ship.path.initial_speed * 3);\nconsole.log(ship4.path.initial_speed * 3 / 2);\nconsole.log(ship6.path.initial_speed); // console.log(ship5.path.initial_speed / 2)\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n\nconsole.log('---'); // console.log(ship.path.final_speed / ship6.path.final_speed)\n// console.log(ship.path.final_speed / ship3.path.final_speed)\n\nconsole.log(ship3.path.final_speed * 3);\nconsole.log(ship5.path.final_speed * 3 / 2);\nconsole.log(ship6.path.final_speed);\nconsole.log('+++');\nconsole.log(ship6.path.max_speed);\nconsole.log(ship.path.max_speed * 3);\nconsole.log(ship2.path.max_speed * 3);\nconsole.log(ship3.path.max_speed * 3); // console.log(ship4.path.final_speed)\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\nexport { baseSystem };","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/System.js"],"names":["Planet","Ship","Orbit","Bezier","ShipComponent","System","constructor","galaxy","radius","centre","planets","ships","steps","gravitationalConstant","step","planet","color","ship","new_planet","mass","x","y","push","new_ship","baseSystem","p0","p1","p2","p3","sun","planet3","planet4","path","ship2","ship3","ship4","ship5","ship6","console","log","initial_speed","final_speed","max_speed"],"mappings":"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","sourcesContent":["import Planet from './Planet'\nimport Ship from './Ship'\nimport Orbit from './Orbit'\nimport Bezier from './Bezier'\nimport ShipComponent from '../components/ShipComponent'\n\nclass System {\n\n    constructor(galaxy, radius) {\n        this.galaxy = galaxy\n        this.radius = radius\n        this.centre = [radius / 2, radius / 2]\n        this.planets = []\n        this.ships = []\n        this.steps = 0\n        this.gravitationalConstant = 1/50\n    }\n\n    step() {\n        this.steps++\n        for (const planet of this.planets) {\n            planet.color !== 'yellow' && planet.step() \n        }\n        for (const ship of this.ships) {\n            ship.step() \n        }\n        return this\n    }\n\n    new_planet(color, radius, mass, x, y) {\n        const planet = new Planet(this, color, radius, mass, x, y)\n        this.planets.push(planet)\n        return planet\n    }\n\n    new_ship(color, radius, mass, x, y) {\n        const ship = new Ship(this, color, radius, mass, x, y)\n        this.ships.push(ship)\n        return ship\n    }\n\n}\n\nexport default System\n\nconst baseSystem = new System('Galaxy', 500)\n\nlet [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]]\n\np0 = [100, 100]\n\np1 = [120, 80]\n\np2 = [350, 400]\n\np3 = [150, 350]\n\nconst sun = baseSystem.new_planet('yellow', 5, 5000, p0[0], p0[1]);\n\n\n// const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 10, p1[0], p1[1])\n// planet.path = new Orbit(sun, [75, 60], 500, 0, 0, 1)\n\n\n// planet2.path = new Orbit(sun, [75, 60], 500, 0, 90, 1)\n\nconst planet3 = baseSystem.new_planet('purple', 2, 10, p2[0], p2[1])\n\nconst planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1])\n// planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('orange', 2, 10)\nship.path = new Bezier(0, 1000, p0, p1)\n\nconst ship2 = baseSystem.new_ship('orange', 2, 10)\nship2.path = new Bezier(0, 1000, p1, p2)\n\nconst ship3 = baseSystem.new_ship('orange', 2, 10)\nship3.path = new Bezier(0, 1000, p2, p3)\n\n\nconst ship4 = baseSystem.new_ship('red', 2, 10)\nship4.path = new Bezier(0, 1000, p0, p1, p2)\n\nconst ship5 = baseSystem.new_ship('red', 2, 10)\nship5.path = new Bezier(0, 1000, p1, p2, p3)\n\n\nconst ship6 = baseSystem.new_ship('blue', 2, 10)\nship6.path = new Bezier(0, 1000, p0, p1, p2, p3)\n\nconsole.log(ship.path.initial_speed * 3)\nconsole.log(ship4.path.initial_speed * 3/2)\nconsole.log(ship6.path.initial_speed)\n// console.log(ship5.path.initial_speed / 2)\n\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n\nconsole.log('---')\n\n// console.log(ship.path.final_speed / ship6.path.final_speed)\n\n\n// console.log(ship.path.final_speed / ship3.path.final_speed)\n\nconsole.log(ship3.path.final_speed * 3)\nconsole.log(ship5.path.final_speed * 3/2)\nconsole.log(ship6.path.final_speed)\n\nconsole.log('+++')\n\nconsole.log(ship6.path.max_speed)\nconsole.log(ship.path.max_speed * 3)\nconsole.log(ship2.path.max_speed * 3)\nconsole.log(ship3.path.max_speed * 3)\n\n// console.log(ship4.path.final_speed)\n\n\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\n\n\nexport { baseSystem }"]},"metadata":{},"sourceType":"module"}