{"ast":null,"code":"import { baseSystem } from './System';\n\nclass Orbit {\n  constructor(primary, radius, period, initialAngle, rotation = 0, direction = 1) {\n    this.primary = primary;\n    this.radius = radius;\n    this.period = period;\n    this.initialAngle = initialAngle;\n    this.rotation = rotation;\n    this.direction = direction;\n  }\n\n  position(steps) {\n    const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius];\n    const [centreX, centreY] = this.getCentre(majorRadius, minorRadius);\n    baseSystem.new_planet('grey', 2, centreX, centreY);\n    const angle = Math.PI * (this.direction * 2 / this.period * steps + this.initialAngle / 180);\n    const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n    const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)];\n    const term1 = majorRadius * cosAngle * cosRotation;\n    const term2 = minorRadius * sinAngle * sinRotation;\n    const x = term1 + term2 + centreX;\n    const y = term1 - term2 + centreY;\n    return [x, y];\n  } // unrotated_position(steps) {\n  //     const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n  //     const [centreX, centreY] = this.getCentre(radiusX, radiusY)\n  //     const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n  //     const x = centreX + radiusX * Math.cos(angle)\n  //     const y = centreY + radiusY * Math.sin(angle)\n  //     return [x, y]\n  // }\n\n\n  getCentre(majorRadius, minorRadius) {\n    const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n    return [primaryX + (majorRadius ** 2 - minorRadius ** 2) ** 0.5, primaryY];\n  }\n\n}\n\nexport default Orbit;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Orbit.js"],"names":["baseSystem","Orbit","constructor","primary","radius","period","initialAngle","rotation","direction","position","steps","minorRadius","majorRadius","Array","isArray","sort","centreX","centreY","getCentre","new_planet","angle","Math","PI","cosAngle","sinAngle","cos","sin","cosRotation","sinRotation","term1","term2","x","y","primaryX","primaryY"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B;;AAIA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,YAA1B,EAAwCC,QAAQ,GAAG,CAAnD,EAAsDC,SAAS,GAAG,CAAlE,EAAqE;AAC5E,SAAKL,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAM,CAACC,WAAD,EAAcC,WAAd,IAA6BC,KAAK,CAACC,OAAN,CAAc,KAAKV,MAAnB,IAA6B,KAAKA,MAAL,CAAYW,IAAZ,EAA7B,GAAkD,CAAC,KAAKX,MAAN,EAAc,KAAKA,MAAnB,CAArF;AACA,UAAM,CAACY,OAAD,EAAUC,OAAV,IAAqB,KAAKC,SAAL,CAAeN,WAAf,EAA4BD,WAA5B,CAA3B;AACAX,IAAAA,UAAU,CAACmB,UAAX,CAAsB,MAAtB,EAA8B,CAA9B,EAAiCH,OAAjC,EAA0CC,OAA1C;AACA,UAAMG,KAAK,GAAGC,IAAI,CAACC,EAAL,IAAW,KAAKd,SAAL,GAAiB,CAAjB,GAAqB,KAAKH,MAA1B,GAAmCK,KAAnC,GAA2C,KAAKJ,YAAL,GAAoB,GAA1E,CAAd;AACA,UAAM,CAACiB,QAAD,EAAWC,QAAX,IAAuB,CAACH,IAAI,CAACI,GAAL,CAASL,KAAT,CAAD,EAAkBC,IAAI,CAACK,GAAL,CAASN,KAAT,CAAlB,CAA7B;AACA,UAAM,CAACO,WAAD,EAAcC,WAAd,IAA6B,CAACP,IAAI,CAACI,GAAL,CAAS,KAAKlB,QAAd,CAAD,EAA0Bc,IAAI,CAACK,GAAL,CAAS,KAAKnB,QAAd,CAA1B,CAAnC;AACA,UAAMsB,KAAK,GAAGjB,WAAW,GAAGW,QAAd,GAAyBI,WAAvC;AACA,UAAMG,KAAK,GAAGnB,WAAW,GAAGa,QAAd,GAAyBI,WAAvC;AACA,UAAMG,CAAC,GAAGF,KAAK,GAAGC,KAAR,GAAgBd,OAA1B;AACA,UAAMgB,CAAC,GAAGH,KAAK,GAAGC,KAAR,GAAgBb,OAA1B;AACA,WAAO,CAACc,CAAD,EAAIC,CAAJ,CAAP;AACH,GAtBO,CAwBR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,EAAAA,SAAS,CAACN,WAAD,EAAcD,WAAd,EAA2B;AAChC,UAAM,CAACsB,QAAD,EAAWC,QAAX,IAAuBrB,KAAK,CAACC,OAAN,CAAc,KAAKX,OAAnB,IAA8B,KAAKA,OAAnC,GAA6C,KAAKA,OAAL,CAAaM,QAAvF;AACA,WAAO,CAACwB,QAAQ,GAAG,CAACrB,WAAW,IAAI,CAAf,GAAmBD,WAAW,IAAI,CAAnC,KAAyC,GAArD,EAA0DuB,QAA1D,CAAP;AACH;;AApCO;;AAuCZ,eAAejC,KAAf","sourcesContent":["import { baseSystem } from './System'\n\n\n\nclass Orbit {\n    constructor(primary, radius, period, initialAngle, rotation = 0, direction = 1) {\n        this.primary = primary\n        this.radius = radius\n        this.period = period\n        this.initialAngle = initialAngle\n        this.rotation = rotation\n        this.direction = direction\n    }\n\n    position(steps) {\n        const [minorRadius, majorRadius] = Array.isArray(this.radius) ? this.radius.sort() : [this.radius, this.radius]\n        const [centreX, centreY] = this.getCentre(majorRadius, minorRadius)\n        baseSystem.new_planet('grey', 2, centreX, centreY)\n        const angle = Math.PI * (this.direction * 2 / this.period * steps + this.initialAngle / 180);\n        const [cosAngle, sinAngle] = [Math.cos(angle), Math.sin(angle)];\n        const [cosRotation, sinRotation] = [Math.cos(this.rotation), Math.sin(this.rotation)]\n        const term1 = majorRadius * cosAngle * cosRotation\n        const term2 = minorRadius * sinAngle * sinRotation\n        const x = term1 + term2 + centreX\n        const y = term1 - term2 + centreY\n        return [x, y]\n    }\n\n    // unrotated_position(steps) {\n    //     const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n    //     const [centreX, centreY] = this.getCentre(radiusX, radiusY)\n    //     const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n    //     const x = centreX + radiusX * Math.cos(angle)\n    //     const y = centreY + radiusY * Math.sin(angle)\n    //     return [x, y]\n    // }\n\n    getCentre(majorRadius, minorRadius) {\n        const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n        return [primaryX + (majorRadius ** 2 - minorRadius ** 2) ** 0.5, primaryY]\n    }\n}\n\nexport default Orbit"]},"metadata":{},"sourceType":"module"}