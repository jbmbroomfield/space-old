{"ast":null,"code":"var _jsxFileName = \"/home/jim/projects/space/src/components/ShipComponent.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShipComponent = ({\n  ship,\n  zoom\n}) => {\n  // const dimensions = `${ship.radius * zoom * 2}px`;\n  const time = ship.system.time;\n  const position = ship.position(time);\n  let [x, y] = [0, 0];\n\n  if (position) {\n    [x, y] = ship.position(time);\n  }\n\n  x *= zoom;\n  y *= zoom;\n  const direction = ship.direction(time);\n  const width = ship.radius;\n  const height = ship.radius * 3;\n  const style = {\n    width: 0,\n    height: 0,\n    borderLeft: `${width}px solid transparent`,\n    borderRight: `${width}px solid transparent`,\n    borderBottom: `${height}px solid ${ship.color}`,\n    // transform: `rotate(${direction * 180 / Math.PI}deg)`,\n    transform: `rotate(${direction}rad)`,\n    // left: `${x - ship.radius}px`,\n    // bottom: `${y - ship.radius}px`,\n    left: `${x - width / 2}px`,\n    bottom: `${y}px`\n  };\n  const pRad = 20;\n  const dimensions = `${pRad * zoom * 2}px`;\n  const planetStyle = {\n    height: dimensions,\n    width: dimensions,\n    backgroundColor: 'red',\n    borderRadius: \"50%\",\n    left: `${x - pRad}px`,\n    bottom: `${y - pRad}px`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"entity ship\",\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"entity planet\",\n      style: planetStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ShipComponent;\nexport default ShipComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShipComponent\");","map":{"version":3,"sources":["/home/jim/projects/space/src/components/ShipComponent.js"],"names":["React","ShipComponent","ship","zoom","time","system","position","x","y","direction","width","radius","height","style","borderLeft","borderRight","borderBottom","color","transform","left","bottom","pRad","dimensions","planetStyle","backgroundColor","borderRadius"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AAEtC;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYD,IAAzB;AACA,QAAME,QAAQ,GAAGJ,IAAI,CAACI,QAAL,CAAcF,IAAd,CAAjB;AACA,MAAI,CAACG,CAAD,EAAIC,CAAJ,IAAS,CAAC,CAAD,EAAI,CAAJ,CAAb;;AAEA,MAAIF,QAAJ,EAAc;AACV,KAACC,CAAD,EAAIC,CAAJ,IAASN,IAAI,CAACI,QAAL,CAAcF,IAAd,CAAT;AACH;;AACDG,EAAAA,CAAC,IAAIJ,IAAL;AACAK,EAAAA,CAAC,IAAIL,IAAL;AACA,QAAMM,SAAS,GAAGP,IAAI,CAACO,SAAL,CAAeL,IAAf,CAAlB;AAEA,QAAMM,KAAK,GAAGR,IAAI,CAACS,MAAnB;AACA,QAAMC,MAAM,GAAGV,IAAI,CAACS,MAAL,GAAc,CAA7B;AAEA,QAAME,KAAK,GAAG;AACVH,IAAAA,KAAK,EAAE,CADG;AAEVE,IAAAA,MAAM,EAAE,CAFE;AAGVE,IAAAA,UAAU,EAAG,GAAEJ,KAAM,sBAHX;AAIVK,IAAAA,WAAW,EAAG,GAAEL,KAAM,sBAJZ;AAKVM,IAAAA,YAAY,EAAG,GAAEJ,MAAO,YAAWV,IAAI,CAACe,KAAM,EALpC;AAMV;AACAC,IAAAA,SAAS,EAAG,UAAST,SAAU,MAPrB;AAQV;AACA;AACAU,IAAAA,IAAI,EAAG,GAAEZ,CAAC,GAAGG,KAAK,GAAG,CAAE,IAVb;AAWVU,IAAAA,MAAM,EAAG,GAAEZ,CAAE;AAXH,GAAd;AAcA,QAAMa,IAAI,GAAG,EAAb;AACA,QAAMC,UAAU,GAAI,GAAED,IAAI,GAAGlB,IAAP,GAAc,CAAE,IAAtC;AAEA,QAAMoB,WAAW,GAAG;AAChBX,IAAAA,MAAM,EAAEU,UADQ;AAEhBZ,IAAAA,KAAK,EAAEY,UAFS;AAGhBE,IAAAA,eAAe,EAAE,KAHD;AAIhBC,IAAAA,YAAY,EAAE,KAJE;AAKhBN,IAAAA,IAAI,EAAG,GAAEZ,CAAC,GAAGc,IAAK,IALF;AAMhBD,IAAAA,MAAM,EAAG,GAAEZ,CAAC,GAAGa,IAAK;AANJ,GAApB;AASA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,KAAK,EAAER;AAApC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,KAAK,EAAEU;AAAtC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAnDD;;KAAMtB,a;AAqDN,eAAeA,aAAf","sourcesContent":["import React from 'react'\n\nconst ShipComponent = ({ ship, zoom }) => {\n\n    // const dimensions = `${ship.radius * zoom * 2}px`;\n    const time = ship.system.time;\n    const position = ship.position(time);\n    let [x, y] = [0, 0];\n\n    if (position) {\n        [x, y] = ship.position(time)\n    }\n    x *= zoom\n    y *= zoom\n    const direction = ship.direction(time)\n\n    const width = ship.radius\n    const height = ship.radius * 3\n\n    const style = {\n        width: 0,\n        height: 0,\n        borderLeft: `${width}px solid transparent`,\n        borderRight: `${width}px solid transparent`,\n        borderBottom: `${height}px solid ${ship.color}`,\n        // transform: `rotate(${direction * 180 / Math.PI}deg)`,\n        transform: `rotate(${direction}rad)`,\n        // left: `${x - ship.radius}px`,\n        // bottom: `${y - ship.radius}px`,\n        left: `${x - width / 2}px`,\n        bottom: `${y}px`,\n    }\n   \n    const pRad = 20\n    const dimensions = `${pRad * zoom * 2}px`;\n\n    const planetStyle = {\n        height: dimensions,\n        width: dimensions,\n        backgroundColor: 'red',\n        borderRadius: \"50%\",\n        left: `${x - pRad}px`,\n        bottom: `${y - pRad}px`,\n    }\n\n    return (\n        <div>\n            <div className=\"entity ship\" style={style}></div>\n            <div className=\"entity planet\" style={planetStyle}></div>\n\n        </div>\n    )\n\n}\n\nexport default ShipComponent"]},"metadata":{},"sourceType":"module"}