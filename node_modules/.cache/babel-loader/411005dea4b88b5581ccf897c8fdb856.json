{"ast":null,"code":"class Orbit {\n  constructor(primary, radius, period, initial, direction = 1) {\n    this.primary = primary;\n    this.radius = radius;\n    this.period = period;\n    this.initial = initial;\n    this.direction = direction;\n  }\n\n  position(steps) {\n    const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n    const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n    let centreX, centreY;\n\n    if (radiusX === radiusY) {\n      [centreX, centreY] = [primaryX, primaryY];\n    } else if (radiusX > radiusY) {\n      centreY = primaryY;\n      centreX = primaryX + (radiusX ** 2 - radiusY ** 2) ** 0.5;\n    } else {\n      centreX = primaryX;\n      centreY = primaryY + (radiusY ** 2 - radiusX ** 2) ** 0.5;\n    }\n\n    const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180;\n    const radius = this.radius;\n    const x = centreX + radiusX * Math.cos(angle);\n    const y = centreY + radiusY * Math.sin(angle);\n    return [x, y];\n  }\n\n}\n\nexport default Orbit;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Orbit.js"],"names":["Orbit","constructor","primary","radius","period","initial","direction","position","steps","primaryX","primaryY","Array","isArray","radiusX","radiusY","centreX","centreY","angle","Math","PI","x","cos","y","sin"],"mappings":"AAAA,MAAMA,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCC,SAAS,GAAG,CAA/C,EAAkD;AACzD,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBC,KAAK,CAACC,OAAN,CAAc,KAAKV,OAAnB,IAA8B,KAAKA,OAAnC,GAA6C,KAAKA,OAAL,CAAaK,QAAvF;AACA,UAAM,CAACM,OAAD,EAAUC,OAAV,IAAqBH,KAAK,CAACC,OAAN,CAAc,KAAKT,MAAnB,IAA6B,KAAKA,MAAlC,GAA2C,CAAC,KAAKA,MAAN,EAAc,KAAKA,MAAnB,CAAtE;AAEA,QAAIY,OAAJ,EAAaC,OAAb;;AAEA,QAAIH,OAAO,KAAKC,OAAhB,EAAyB;AACrB,OAACC,OAAD,EAAUC,OAAV,IAAqB,CAACP,QAAD,EAAWC,QAAX,CAArB;AACH,KAFD,MAEO,IAAIG,OAAO,GAAGC,OAAd,EAAwB;AAC3BE,MAAAA,OAAO,GAAGN,QAAV;AACAK,MAAAA,OAAO,GAAGN,QAAQ,GAAG,CAACI,OAAO,IAAI,CAAX,GAAeC,OAAO,IAAI,CAA3B,KAAiC,GAAtD;AACH,KAHM,MAGA;AACHC,MAAAA,OAAO,GAAGN,QAAV;AACAO,MAAAA,OAAO,GAAGN,QAAQ,GAAG,CAACI,OAAO,IAAI,CAAX,GAAeD,OAAO,IAAI,CAA3B,KAAiC,GAAtD;AACH;;AAED,UAAMI,KAAK,GAAG,KAAKX,SAAL,GAAiB,CAAjB,GAAqBY,IAAI,CAACC,EAA1B,GAA+B,KAAKf,MAApC,GAA6CI,KAA7C,GAAqD,KAAKH,OAAL,GAAea,IAAI,CAACC,EAApB,GAAyB,GAA5F;AAEA,UAAMhB,MAAM,GAAG,KAAKA,MAApB;AAEA,UAAMiB,CAAC,GAAGL,OAAO,GAAGF,OAAO,GAAGK,IAAI,CAACG,GAAL,CAASJ,KAAT,CAA9B;AACA,UAAMK,CAAC,GAAGN,OAAO,GAAGF,OAAO,GAAGI,IAAI,CAACK,GAAL,CAASN,KAAT,CAA9B;AACA,WAAO,CAACG,CAAD,EAAIE,CAAJ,CAAP;AACH;;AAhCO;;AAmCZ,eAAetB,KAAf","sourcesContent":["class Orbit {\n    constructor(primary, radius, period, initial, direction = 1) {\n        this.primary = primary\n        this.radius = radius\n        this.period = period\n        this.initial = initial\n        this.direction = direction\n    }\n\n    position(steps) {\n        const [primaryX, primaryY] = Array.isArray(this.primary) ? this.primary : this.primary.position;\n        const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n\n        let centreX, centreY\n\n        if (radiusX === radiusY) {\n            [centreX, centreY] = [primaryX, primaryY]\n        } else if (radiusX > radiusY)  {\n            centreY = primaryY\n            centreX = primaryX + (radiusX ** 2 - radiusY ** 2) ** 0.5\n        } else {\n            centreX = primaryX\n            centreY = primaryY + (radiusY ** 2 - radiusX ** 2) ** 0.5\n        }\n\n        const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n\n        const radius = this.radius\n\n        const x = centreX + radiusX * Math.cos(angle)\n        const y = centreY + radiusY * Math.sin(angle)\n        return [x, y]\n    }\n}\n\nexport default Orbit"]},"metadata":{},"sourceType":"module"}