{"ast":null,"code":"import Path from './Path';\nimport Direction from './Direction';\nimport Vector from './Vector';\n\nclass CircularTurn extends Path {\n  constructor(source, radius, startTime, clockwiseDirection = 1) {\n    super();\n    this.clockwiseDirection = clockwiseDirection;\n    this.speed = source.speed(startTime);\n    this.radius = radius; // const initialVelocity = source.velocity(startTime)\n\n    const initialDirection = source.direction(startTime);\n    const initialPosition = source.position(startTime);\n    const directionToCentre = Direction.add(initialDirection, clockwiseDirection ? Math.PI / 2 : 3 * Math.PI / 2);\n    this.centre = Vector.build(initialPosition, directionToCentre, radius);\n    this.period = 2 * Math.PI * radius / this.speed;\n\n    if (clockwiseDirection == 1) {\n      this.initialAngle = Direction.negative(initialDirection);\n    } else {\n      this.initialAngle = Direction.subtract(Math.PI - initialDirection);\n    }\n  }\n\n  position(time) {\n    const angle = 2 * Math.PI * this.clockwiseDirection / this.period * time + this.initialAngle;\n    const x = this.radius * Math.cos(angle) + this.centre[0];\n    const y = this.radius * Math.sin(angle) + this.centre[1];\n    console.log(this.radius, angle, this.centre);\n    console.log({\n      angle,\n      x,\n      y\n    });\n    return [x, y];\n  }\n\n}\n\nexport default CircularTurn;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/CircularTurn.js"],"names":["Path","Direction","Vector","CircularTurn","constructor","source","radius","startTime","clockwiseDirection","speed","initialDirection","direction","initialPosition","position","directionToCentre","add","Math","PI","centre","build","period","initialAngle","negative","subtract","time","angle","x","cos","y","sin","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,YAAN,SAA2BH,IAA3B,CAAgC;AAE5BI,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,SAAjB,EAA4BC,kBAAkB,GAAG,CAAjD,EAAoD;AAC3D;AACA,SAAKA,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,KAAL,GAAaJ,MAAM,CAACI,KAAP,CAAaF,SAAb,CAAb;AACA,SAAKD,MAAL,GAAcA,MAAd,CAJ2D,CAK3D;;AACA,UAAMI,gBAAgB,GAAGL,MAAM,CAACM,SAAP,CAAiBJ,SAAjB,CAAzB;AACA,UAAMK,eAAe,GAAGP,MAAM,CAACQ,QAAP,CAAgBN,SAAhB,CAAxB;AACA,UAAMO,iBAAiB,GAAGb,SAAS,CAACc,GAAV,CAAcL,gBAAd,EAAgCF,kBAAkB,GAAGQ,IAAI,CAACC,EAAL,GAAU,CAAb,GAAiB,IAAID,IAAI,CAACC,EAAT,GAAc,CAAjF,CAA1B;AAEA,SAAKC,MAAL,GAAchB,MAAM,CAACiB,KAAP,CAAaP,eAAb,EAA8BE,iBAA9B,EAAiDR,MAAjD,CAAd;AAEA,SAAKc,MAAL,GAAc,IAAIJ,IAAI,CAACC,EAAT,GAAcX,MAAd,GAAuB,KAAKG,KAA1C;;AAEA,QAAID,kBAAkB,IAAI,CAA1B,EAA6B;AACzB,WAAKa,YAAL,GAAoBpB,SAAS,CAACqB,QAAV,CAAmBZ,gBAAnB,CAApB;AACH,KAFD,MAEO;AACH,WAAKW,YAAL,GAAoBpB,SAAS,CAACsB,QAAV,CAAmBP,IAAI,CAACC,EAAL,GAAUP,gBAA7B,CAApB;AACH;AACJ;;AAEDG,EAAAA,QAAQ,CAACW,IAAD,EAAO;AACX,UAAMC,KAAK,GAAG,IAAIT,IAAI,CAACC,EAAT,GAAc,KAAKT,kBAAnB,GAAwC,KAAKY,MAA7C,GAAsDI,IAAtD,GAA6D,KAAKH,YAAhF;AACA,UAAMK,CAAC,GAAG,KAAKpB,MAAL,GAAcU,IAAI,CAACW,GAAL,CAASF,KAAT,CAAd,GAAgC,KAAKP,MAAL,CAAY,CAAZ,CAA1C;AACA,UAAMU,CAAC,GAAG,KAAKtB,MAAL,GAAcU,IAAI,CAACa,GAAL,CAASJ,KAAT,CAAd,GAAgC,KAAKP,MAAL,CAAY,CAAZ,CAA1C;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,MAAjB,EAAyBmB,KAAzB,EAAgC,KAAKP,MAArC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACN,MAAAA,KAAD;AAAQC,MAAAA,CAAR;AAAWE,MAAAA;AAAX,KAAZ;AACA,WAAO,CAACF,CAAD,EAAIE,CAAJ,CAAP;AACH;;AA9B2B;;AAkChC,eAAezB,YAAf","sourcesContent":["import Path from './Path'\nimport Direction from './Direction'\nimport Vector from './Vector'\n\nclass CircularTurn extends Path {\n\n    constructor(source, radius, startTime, clockwiseDirection = 1) {\n        super()\n        this.clockwiseDirection = clockwiseDirection\n        this.speed = source.speed(startTime)\n        this.radius = radius\n        // const initialVelocity = source.velocity(startTime)\n        const initialDirection = source.direction(startTime)\n        const initialPosition = source.position(startTime)\n        const directionToCentre = Direction.add(initialDirection, clockwiseDirection ? Math.PI / 2 : 3 * Math.PI / 2)\n\n        this.centre = Vector.build(initialPosition, directionToCentre, radius)\n\n        this.period = 2 * Math.PI * radius / this.speed\n\n        if (clockwiseDirection == 1) {\n            this.initialAngle = Direction.negative(initialDirection)\n        } else {\n            this.initialAngle = Direction.subtract(Math.PI - initialDirection)\n        }\n    }\n\n    position(time) {\n        const angle = 2 * Math.PI * this.clockwiseDirection / this.period * time + this.initialAngle;\n        const x = this.radius * Math.cos(angle) + this.centre[0]\n        const y = this.radius * Math.sin(angle) + this.centre[1]\n        console.log(this.radius, angle, this.centre)\n        console.log({angle, x, y})\n        return [x, y]\n    }\n\n}\n\nexport default CircularTurn"]},"metadata":{},"sourceType":"module"}