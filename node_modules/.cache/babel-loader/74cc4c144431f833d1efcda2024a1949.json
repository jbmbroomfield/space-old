{"ast":null,"code":"import Bezier from './Bezier';\nimport Vector from './Vector';\nimport Direction from './Direction';\n\nclass Journey {\n  static journey(origin, destination, t0, t3) {\n    const handling = 100;\n    const acceleration = 1;\n    const v0 = origin.velocity(t0);\n    const direction0 = Direction.direction(v0);\n    const line = destination.position(t3) - origin.position(t0);\n    const unitLine = Vector.unitVector(line);\n    const lineDirection = Direction.fromVelocity(line);\n    const p0 = origin.position(t0);\n    const p1 = Vector.build(origin.position(t0), origin.direction(t0), handling);\n    const p7 = destination.position(t3);\n    const p6 = Vector.build(destination.position(t3), destination.negativeDirection(t3), handling);\n    console.log({\n      lineDirection,\n      direction0\n    });\n    const turn1Angle = Direction.subtract(lineDirection, direction0);\n    let p2;\n\n    if (turn1Angle <= Math.PI / 2 || turn1Angle >= 3 * Math.PI / 2) {\n      p2 = p1;\n    } else if (turn1Angle < Math.PI) {\n      const rotatedUnitLine = Vector.rotate(unitLine, 3 * Math.PI / 2);\n      const p1p2L = handling * (2 * turn1Angle / Math.PI - 1);\n      const p1p2 = Vector.multiply(p1p2L, rotatedUnitLine);\n      console.log('a');\n      console.log({\n        p1,\n        p1p2\n      });\n      p2 = Vector.add(p1, p1p2);\n    } else {\n      const rotatedUnitLine = Vector.rotate(unitLine, Math.PI / 2);\n      console.log({\n        turn1Angle\n      });\n      const p1p2L = handling * (3 - 2 * turn1Angle / Math.PI);\n      console.log({\n        p1p2L,\n        rotatedUnitLine\n      });\n      const p1p2 = Vector.multiply(p1p2L, rotatedUnitLine);\n      console.log('b');\n      console.log({\n        p1,\n        p1p2\n      });\n      p2 = Vector.add(p1, p1p2);\n    }\n\n    console.log({\n      t0,\n      t3,\n      p0,\n      p1,\n      p2\n    });\n    return new Bezier(t0, t3, p0, p1, p2); // const turn2Angle = Direction.subtract()\n  }\n\n}\n\nexport default Journey;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Journey.js"],"names":["Bezier","Vector","Direction","Journey","journey","origin","destination","t0","t3","handling","acceleration","v0","velocity","direction0","direction","line","position","unitLine","unitVector","lineDirection","fromVelocity","p0","p1","build","p7","p6","negativeDirection","console","log","turn1Angle","subtract","p2","Math","PI","rotatedUnitLine","rotate","p1p2L","p1p2","multiply","add"],"mappings":"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","sourcesContent":["import Bezier from './Bezier'\nimport Vector from './Vector'\nimport Direction from './Direction'\n\nclass Journey {\n\n    static journey(origin, destination, t0, t3) {\n        const handling = 100\n        const acceleration = 1\n\n        const v0 = origin.velocity(t0)\n        const direction0 = Direction.direction(v0)\n\n        const line = destination.position(t3) - origin.position(t0)\n        const unitLine = Vector.unitVector(line)\n        const lineDirection = Direction.fromVelocity(line)\n        const p0 = origin.position(t0)\n        const p1 = Vector.build(origin.position(t0), origin.direction(t0), handling)\n\n        const p7 = destination.position(t3)\n        const p6 = Vector.build(destination.position(t3), destination.negativeDirection(t3), handling)\n\n        console.log({lineDirection, direction0})\n        const turn1Angle = Direction.subtract(lineDirection, direction0)\n        let p2\n        if (turn1Angle <= Math.PI / 2 || turn1Angle >= 3*Math.PI / 2) {\n            p2 = p1\n        } else if (turn1Angle < Math.PI) {\n            const rotatedUnitLine = Vector.rotate(unitLine, 3 * Math.PI / 2)\n            const p1p2L = handling * (2 * turn1Angle / Math.PI - 1)\n            const p1p2 = Vector.multiply(p1p2L, rotatedUnitLine)\n            console.log('a')\n            console.log({p1, p1p2})\n            p2 = Vector.add(p1, p1p2)\n        } else { \n            const rotatedUnitLine = Vector.rotate(unitLine, Math.PI / 2)\n            console.log({turn1Angle})\n            const p1p2L = handling * (3 - 2 * turn1Angle / Math.PI)\n            console.log({p1p2L, rotatedUnitLine})\n            const p1p2 = Vector.multiply(p1p2L, rotatedUnitLine)\n            console.log('b')\n            console.log({p1, p1p2})\n            p2 = Vector.add(p1, p1p2)\n        }\n\n        console.log({t0, t3, p0, p1, p2})\n\n        return new Bezier(t0, t3, p0, p1, p2)\n\n        // const turn2Angle = Direction.subtract()\n\n    }\n\n\n}\n\nexport default Journey"]},"metadata":{},"sourceType":"module"}