{"ast":null,"code":"class Orbit {\n  constructor(centre, radius, period, initial, direction = 1) {\n    this.centre = centre;\n    this.radius = radius;\n    this.period = period;\n    this.initial = initial;\n    this.direction = direction;\n  }\n\n  position(steps) {\n    const [centreX, centreY] = Array.isArray(this.centre) ? this.centre : this.centre.position;\n    const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius];\n    const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180;\n    const radius = this.radius;\n    const x = centreX + radiusX * Math.cos(angle);\n    const y = centreY + radiusY * Math.sin(angle);\n    return [x, y];\n  }\n\n}\n\nexport default Orbit;","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/Orbit.js"],"names":["Orbit","constructor","centre","radius","period","initial","direction","position","steps","centreX","centreY","Array","isArray","radiusX","radiusY","angle","Math","PI","x","cos","y","sin"],"mappings":"AAAA,MAAMA,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAkCC,SAAS,GAAG,CAA9C,EAAiD;AACxD,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAM,CAACC,OAAD,EAAUC,OAAV,IAAqBC,KAAK,CAACC,OAAN,CAAc,KAAKV,MAAnB,IAA6B,KAAKA,MAAlC,GAA2C,KAAKA,MAAL,CAAYK,QAAlF;AACA,UAAM,CAACM,OAAD,EAAUC,OAAV,IAAqBH,KAAK,CAACC,OAAN,CAAc,KAAKT,MAAnB,IAA6B,KAAKA,MAAlC,GAA2C,CAAC,KAAKA,MAAN,EAAc,KAAKA,MAAnB,CAAtE;AACA,UAAMY,KAAK,GAAG,KAAKT,SAAL,GAAiB,CAAjB,GAAqBU,IAAI,CAACC,EAA1B,GAA+B,KAAKb,MAApC,GAA6CI,KAA7C,GAAqD,KAAKH,OAAL,GAAeW,IAAI,CAACC,EAApB,GAAyB,GAA5F;AAEA,UAAMd,MAAM,GAAG,KAAKA,MAApB;AAEA,UAAMe,CAAC,GAAGT,OAAO,GAAGI,OAAO,GAAGG,IAAI,CAACG,GAAL,CAASJ,KAAT,CAA9B;AACA,UAAMK,CAAC,GAAGV,OAAO,GAAGI,OAAO,GAAGE,IAAI,CAACK,GAAL,CAASN,KAAT,CAA9B;AACA,WAAO,CAACG,CAAD,EAAIE,CAAJ,CAAP;AACH;;AAnBO;;AAsBZ,eAAepB,KAAf","sourcesContent":["class Orbit {\n    constructor(centre, radius, period, initial, direction = 1) {\n        this.centre = centre\n        this.radius = radius\n        this.period = period\n        this.initial = initial\n        this.direction = direction\n    }\n\n    position(steps) {\n        const [centreX, centreY] = Array.isArray(this.centre) ? this.centre : this.centre.position;\n        const [radiusX, radiusY] = Array.isArray(this.radius) ? this.radius : [this.radius, this.radius]\n        const angle = this.direction * 2 * Math.PI / this.period * steps + this.initial * Math.PI / 180\n\n        const radius = this.radius\n\n        const x = centreX + radiusX * Math.cos(angle)\n        const y = centreY + radiusY * Math.sin(angle)\n        return [x, y]\n    }\n}\n\nexport default Orbit"]},"metadata":{},"sourceType":"module"}