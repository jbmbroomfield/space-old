{"ast":null,"code":"import Planet from './Planet';\nimport Ship from './Ship';\nimport Orbit from './Orbit';\nimport Journey from './Journey'; // import Bezier from './Bezier'\n// import ShipComponent from '../components/ShipComponent'\n\nimport Stationary from './Stationary';\nimport CircularTurn from './CircularTurn';\n\nclass System {\n  constructor(galaxy, radius) {\n    this.galaxy = galaxy;\n    this.radius = radius;\n    this.centre = [radius / 2, radius / 2];\n    this.planets = [];\n    this.ships = [];\n    this.time = 0;\n    this.gravitationalConstant = 1 / 50;\n  }\n\n  step() {\n    this.time++; // for (const planet of this.planets) {\n    //     planet.color !== 'yellow' && planet.step() \n    // }\n    // for (const ship of this.ships) {\n    //     ship.step() \n    // }\n\n    return this;\n  }\n\n  new_planet(color, radius, mass, x, y) {\n    const planet = new Planet(this, color, radius, mass, x, y);\n    this.planets.push(planet);\n    return planet;\n  }\n\n  new_ship(color, radius, mass, x, y) {\n    const ship = new Ship(this, color, radius, mass, x, y);\n    this.ships.push(ship);\n    return ship;\n  }\n\n}\n\nexport default System;\nconst baseSystem = new System('Galaxy', 500); // let [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]]\n// p0 = [100, 100]\n// p1 = [400, 100]\n// p2 = [400, 400]\n// p3 = [100 , 400]\n// const t = 2000\n\nconst sun = baseSystem.new_planet('yellow', 5, 100);\nsun.paths.push(new Stationary(250, 250)); // const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 100);\nplanet.paths.push(new Orbit(sun, [150, 150], 0, 100, 1));\nconst planet2 = baseSystem.new_planet('purple', 2, 10);\nplanet2.paths.push(new Orbit(sun, [100, 100], 0, 208, -1)); // const planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1])\n// planet4.path = new Stationary(...p3)\n// planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('green', 3, 10);\nship.paths.push(new CircularTurn(planet, 20, 0, 1)); // // console.log(`${planet.position(0)} === ${ship.position(0)}`)\n\nconst ship2 = baseSystem.new_ship('orange', 3, 10);\nship2.paths.push(new CircularTurn(planet, 20, 0, -1)); // // console.log(`${planet.position(0)} === ${ship2.position(0)}`)\n\nconst ship3 = baseSystem.new_ship('green', 3, 10);\nship3.paths.push(new CircularTurn(planet2, 20, 0, 1));\nconst ship4 = baseSystem.new_ship('orange', 3, 10);\nship4.paths.push(new CircularTurn(planet2, 20, 0, -1)); // const ship5 = baseSystem.new_ship('green', 100, 10)\n// ship5.paths.push(new Stationary(250, 250))\n// ship.paths.push(new Orbit(sun, [100, 100], 0, 270, -1))\n// for (let i = 0; i < 1000; i++) {\n//     ship.paths.push(Bezier.newLinearFromEndTime(planet2, planet, 0 + 100*i, 45 + 100 * i))\n//     ship.paths.push(Bezier.newLinearFromEndTime(planet, planet2, 50 + 100*i, 95 + 100 * i))\n// }\n// ship.paths.push(Bezier.newCubicFromEndTime(planet, planet2, 200 + i * 200, 300 + i * 200))\n// ship.path = new Bezier(0, t, p0, p1)\n// const ship2 = baseSystem.new_ship('orange', 2, 10)\n// ship2.path = new Bezier(0, t, p1, p2)\n// const ship3 = baseSystem.new_ship('orange', 2, 10)\n// ship3.path = new Bezier(0, t, p2, p3)\n// const ship4 = baseSystem.new_ship('red', 2, 10)\n// ship4.path = new Bezier(0, t, p0, p1, p2)\n// const ship5 = baseSystem.new_ship('red', 2, 10)\n// ship5.path = new Bezier(0, t, p1, p2, p3)\n// const ship6 = baseSystem.new_ship('blue', 2, 10)\n// ship6.path = new Bezier(0, t, p0, p1, p2, p3)\n// console.log(ship.path.initial_speed * 3)\n// console.log(ship4.path.initial_speed * 3/2)\n// console.log(ship6.path.initial_speed)\n// console.log(ship5.path.initial_speed / 2)\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n// console.log('---')\n// // console.log(ship.path.final_speed / ship6.path.final_speed)\n// // console.log(ship.path.final_speed / ship3.path.final_speed)\n// console.log(ship3.path.final_speed * 3)\n// console.log(ship5.path.final_speed * 3/2)\n// console.log(ship6.path.final_speed)\n// console.log('+++')\n// console.log([ship6.path.max_speed, ship6.path.speed(t/2)])\n// console.log([ship.path.max_speed, ship2.path.max_speed, ship3.path.max_speed])\n// console.log(ship.path.max_speed + ship2.path.max_speed + ship3.path.max_speed)\n// console.log(ship4.path.final_speed)\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\nexport { baseSystem };","map":{"version":3,"sources":["/home/jim/projects/space/src/classes/System.js"],"names":["Planet","Ship","Orbit","Journey","Stationary","CircularTurn","System","constructor","galaxy","radius","centre","planets","ships","time","gravitationalConstant","step","new_planet","color","mass","x","y","planet","push","new_ship","ship","baseSystem","sun","paths","planet2","ship2","ship3","ship4"],"mappings":"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","sourcesContent":["import Planet from './Planet'\nimport Ship from './Ship'\nimport Orbit from './Orbit'\nimport Journey from './Journey'\n// import Bezier from './Bezier'\n// import ShipComponent from '../components/ShipComponent'\nimport Stationary from './Stationary'\nimport CircularTurn from './CircularTurn'\n\nclass System {\n\n    constructor(galaxy, radius) {\n        this.galaxy = galaxy\n        this.radius = radius\n        this.centre = [radius / 2, radius / 2]\n        this.planets = []\n        this.ships = []\n        this.time = 0\n        this.gravitationalConstant = 1/50\n    }\n\n    step() {\n        this.time++\n        // for (const planet of this.planets) {\n        //     planet.color !== 'yellow' && planet.step() \n        // }\n        // for (const ship of this.ships) {\n        //     ship.step() \n        // }\n        return this\n    }\n\n    new_planet(color, radius, mass, x, y) {\n        const planet = new Planet(this, color, radius, mass, x, y)\n        this.planets.push(planet)\n        return planet\n    }\n\n    new_ship(color, radius, mass, x, y) {\n        const ship = new Ship(this, color, radius, mass, x, y)\n        this.ships.push(ship)\n        return ship\n    }\n\n}\n\nexport default System\n\nconst baseSystem = new System('Galaxy', 500)\n\n// let [p0, p1, p2, p3] = [[250, 250], [400, 400], [300, 250], [400, 150]]\n\n// p0 = [100, 100]\n\n// p1 = [400, 100]\n\n// p2 = [400, 400]\n\n// p3 = [100 , 400]\n\n// const t = 2000\n\nconst sun = baseSystem.new_planet('yellow', 5, 100);\nsun.paths.push(new Stationary(250, 250))\n\n\n// const diff = 0\n\nconst planet = baseSystem.new_planet('red', 2, 100)\nplanet.paths.push(new Orbit(sun, [150, 150], 0, 100, 1))\n\nconst planet2 = baseSystem.new_planet('purple', 2, 10)\nplanet2.paths.push(new Orbit(sun, [100, 100], 0, 208, -1))\n\n// const planet4 = baseSystem.new_planet('green', 2, 10, p3[0], p3[1])\n// planet4.path = new Stationary(...p3)\n// planet3.path = new Orbit(sun, [75, 60], 500, 0, 180, 1)\n\nconst ship = baseSystem.new_ship('green', 3, 10)\nship.paths.push(new CircularTurn(planet, 20, 0, 1))\n\n// // console.log(`${planet.position(0)} === ${ship.position(0)}`)\n\nconst ship2 = baseSystem.new_ship('orange', 3, 10)\nship2.paths.push(new CircularTurn(planet, 20, 0, -1))\n\n// // console.log(`${planet.position(0)} === ${ship2.position(0)}`)\n\nconst ship3 = baseSystem.new_ship('green', 3, 10)\nship3.paths.push(new CircularTurn(planet2, 20, 0, 1))\n\n\nconst ship4 = baseSystem.new_ship('orange', 3, 10)\nship4.paths.push(new CircularTurn(planet2, 20, 0, -1))\n\n\n// const ship5 = baseSystem.new_ship('green', 100, 10)\n// ship5.paths.push(new Stationary(250, 250))\n\n\n// ship.paths.push(new Orbit(sun, [100, 100], 0, 270, -1))\n\n// for (let i = 0; i < 1000; i++) {\n//     ship.paths.push(Bezier.newLinearFromEndTime(planet2, planet, 0 + 100*i, 45 + 100 * i))\n//     ship.paths.push(Bezier.newLinearFromEndTime(planet, planet2, 50 + 100*i, 95 + 100 * i))\n// }\n// ship.paths.push(Bezier.newCubicFromEndTime(planet, planet2, 200 + i * 200, 300 + i * 200))\n// ship.path = new Bezier(0, t, p0, p1)\n\n\n// const ship2 = baseSystem.new_ship('orange', 2, 10)\n// ship2.path = new Bezier(0, t, p1, p2)\n\n// const ship3 = baseSystem.new_ship('orange', 2, 10)\n// ship3.path = new Bezier(0, t, p2, p3)\n\n\n// const ship4 = baseSystem.new_ship('red', 2, 10)\n// ship4.path = new Bezier(0, t, p0, p1, p2)\n\n// const ship5 = baseSystem.new_ship('red', 2, 10)\n// ship5.path = new Bezier(0, t, p1, p2, p3)\n\n\n// const ship6 = baseSystem.new_ship('blue', 2, 10)\n// ship6.path = new Bezier(0, t, p0, p1, p2, p3)\n\n// console.log(ship.path.initial_speed * 3)\n// console.log(ship4.path.initial_speed * 3/2)\n// console.log(ship6.path.initial_speed)\n// console.log(ship5.path.initial_speed / 2)\n\n// console.log(ship4.path.initial_velocity)\n// console.log(ship4.path.initial_speed / 3)\n// console.log(ship4.path.max_speed)\n\n// console.log('---')\n\n// // console.log(ship.path.final_speed / ship6.path.final_speed)\n\n\n// // console.log(ship.path.final_speed / ship3.path.final_speed)\n\n// console.log(ship3.path.final_speed * 3)\n// console.log(ship5.path.final_speed * 3/2)\n// console.log(ship6.path.final_speed)\n\n// console.log('+++')\n\n// console.log([ship6.path.max_speed, ship6.path.speed(t/2)])\n// console.log([ship.path.max_speed, ship2.path.max_speed, ship3.path.max_speed])\n\n// console.log(ship.path.max_speed + ship2.path.max_speed + ship3.path.max_speed)\n\n// console.log(ship4.path.final_speed)\n\n\n// const planet4 = baseSystem.new_planet('blue', 2, 10)\n// planet4.path = new Orbit(sun, [75, 60], 500, 0, 270, 1)\n\n// const planet5 = baseSystem.new_planet('white', 2, 10)\n// planet5.path = new Orbit(sun, [75, 60], 500, 0, 45, 1)\n\n// const planet6 = baseSystem.new_planet('brown', 2, 10)\n// planet6.path = new Orbit(sun, [75, 60], 500, 0, 135, 1)\n\n// const planet7 = baseSystem.new_planet('pink', 2, 10)\n// planet7.path = new Orbit(sun, [75, 60], 500, 0, 225, 1)\n\n// const planet8 = baseSystem.new_planet('purple', 2, 10)\n// planet8.path = new Orbit(sun, [75, 60], 500, 0, 315, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, 1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, 1)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet5, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet6, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet7, [10, 10], 100, 0, 0, -1)\n// baseSystem.new_planet('green', 1).path = new Orbit(planet8, [10, 10], 100, 0, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet2, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet2, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet3, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet3, 20, 400, 0)\n\n// baseSystem.new_planet('green', 1).path = new Orbit(planet4, 10, 200, 0, -1)\n\n// baseSystem.new_planet('orange', 0.8).path = new Orbit(planet4, 20, 400, 0)\n\n\n\nexport { baseSystem }"]},"metadata":{},"sourceType":"module"}