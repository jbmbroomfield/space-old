{"ast":null,"code":"var _jsxFileName = \"/home/jim/projects/space/src/components/SystemDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EntityDisplay from './EntityDisplay';\nimport System, { baseSystem } from '../classes/System';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SystemDisplay = props => {\n  _s();\n\n  // const [value, setValue] = useState(0); // integer state\n  const [system, setSystem] = useState(baseSystem); // const [planets, setPlanets] = useState(baseSystem.planets)\n\n  const [planetStyles, setPlanetStyles] = useState([]);\n  const styles = planetStyles.map((style, index) => /*#__PURE__*/_jsxDEV(EntityDisplay, {\n    style: style\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    // setSystem(system => {\n    //     system.new_planet('yellow', 9, 100, 100)\n    //     system.new_planet('red', 5, 120, 80)\n    //     console.log(system.planets)\n    //     return system\n    // })\n    const interval = setInterval(() => {\n      console.log('interval');\n      setSystem(system => {\n        system.step();\n        const nextPlanetStyles = system.planets.map(planet => planet.style);\n        console.log(nextPlanetStyles);\n        setPlanetStyles(nextPlanetStyles);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []); // const intervalFunc = () => {\n  //     setSystem(system => system.step())\n  //     // setPlanets(system.planets)\n  //     setValue(value + 1)\n  // }\n  // setInterval(intervalFunc,1000)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space\",\n    children: styles\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SystemDisplay, \"Lo191awumc3UbdCfHxWap4xzE3M=\");\n\n_c = SystemDisplay;\nexport default SystemDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"SystemDisplay\");","map":{"version":3,"sources":["/home/jim/projects/space/src/components/SystemDisplay.js"],"names":["React","useState","useEffect","EntityDisplay","System","baseSystem","SystemDisplay","props","system","setSystem","planetStyles","setPlanetStyles","styles","map","style","index","interval","setInterval","console","log","step","nextPlanetStyles","planets","planet","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,mBAAnC;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACI,UAAD,CAApC,CAF2B,CAI3B;;AAEA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMW,MAAM,GAAGF,YAAY,CAACG,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,kBAC5B,QAAC,aAAD;AAA2B,IAAA,KAAK,EAAED;AAAlC,KAAoBC,KAApB;AAAA;AAAA;AAAA;AAAA,UADW,CAAf;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAMc,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAV,MAAAA,SAAS,CAACD,MAAM,IAAI;AAChBA,QAAAA,MAAM,CAACY,IAAP;AACA,cAAMC,gBAAgB,GAAGb,MAAM,CAACc,OAAP,CAAeT,GAAf,CAAmBU,MAAM,IAAIA,MAAM,CAACT,KAApC,CAAzB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYE,gBAAZ;AACAV,QAAAA,eAAe,CAACU,gBAAD,CAAf;AACH,OALQ,CAAT;AAMH,KAR2B,EAQ1B,IAR0B,CAA5B;AASA,WAAO,MAAMG,aAAa,CAACR,QAAD,CAA1B;AACH,GAjBQ,EAiBN,EAjBM,CAAT,CAZ2B,CAgC3B;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKJ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7CD;;GAAMN,a;;KAAAA,a;AA+CN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EntityDisplay from './EntityDisplay'\nimport System, { baseSystem } from '../classes/System'\n\nconst SystemDisplay = props => {\n    // const [value, setValue] = useState(0); // integer state\n    const [system, setSystem] = useState(baseSystem)\n\n    // const [planets, setPlanets] = useState(baseSystem.planets)\n\n    const [planetStyles, setPlanetStyles] = useState([])\n\n    const styles = planetStyles.map((style, index) => (\n        <EntityDisplay key={index} style={style} />\n    ))\n\n    useEffect(() => {\n        // setSystem(system => {\n        //     system.new_planet('yellow', 9, 100, 100)\n        //     system.new_planet('red', 5, 120, 80)\n        //     console.log(system.planets)\n        //     return system\n        // })\n        const interval = setInterval(() => {\n            console.log('interval')\n            setSystem(system => {\n                system.step()\n                const nextPlanetStyles = system.planets.map(planet => planet.style)\n                console.log(nextPlanetStyles)\n                setPlanetStyles(nextPlanetStyles)\n            })\n        },1000)\n        return () => clearInterval(interval)\n    }, [])\n\n\n    // const intervalFunc = () => {\n    //     setSystem(system => system.step())\n    //     // setPlanets(system.planets)\n    //     setValue(value + 1)\n    // }\n\n    // setInterval(intervalFunc,1000)\n\n    return (\n        <div className=\"space\">\n            {styles}\n        </div>\n    )\n}\n\nexport default SystemDisplay"]},"metadata":{},"sourceType":"module"}